 1. Introduction (Video) 

Ethereum = Decentralized Global Computer

Ethereum vs Bitcoin:

1. Ethereum is fundamentally different
2. Turing Complete (any program can be run on ethereum - loops allowed)
3. White Papers - BTC (electronic transaction w/o trust, decentralized P2P digital payment network) while Ethereum is a next generation smart contract and dapp platform that goes beyond payments and money.
4. Scripting - proposed changes for bitcoin were rejected then proposed ethereum
5. Bitcoin: 
    1. Lack of Turing completeness for Bitcoin (w/o loops or recursion can’t handle complex computations)
    2. Lack of State 
6. Ethereum uses gas 
7. Ethereum uses Solidity - a high level object oriented language that is syntactically similar other JavaScript
    1. Code is compiled into byte code 
    2. Application Binary Interface: used to interact with deployed smart contracts
        1. This intereprets bite code and makes it human readable
    3. ABI’s allow you to call your smart contracts externally
    4. Like from a traditional front-end written in javascript

Key Use Cases & Applications on Ethereum
1. Token Systems: Fungible (ERC-20 - voting, staking, virtual currencies) and Non-fungible (ERC-721 - Deed, Artwork, Song)
2. Financial Derivatives - most common application of a smart contract (2020’s) - lending/borrowing protocols (AAVE / UNISWAP)
3. Stablecoins (Stable Value Currencies) - A value of a digit asset is pegged to a reference asset (like a fiat currency: ex: USD)
4. Identity & Reputation Systems - Example: ENS - Ethereum name service can be used to identify (authentication) as well as reputation
5. Decentralized File Storage - Ex: file coin where someone can rent out un used storage space on a drive
    1. IPFS - interplanetary file storage
6. Decentralized Autonomous Organizations (DAO) - uniswap example
7. On-chain decentralized marketplaces
8. On-chain prediction markets
9. Smart Multi-Signature Escrows
10. Decentralized Data Feeds 

Week 1: Introduction to Solidity

================================================
INTRODUCTION
================================================

Solidity is Ethereum’s languages for developing smart contracts. It is inspired by C++, Python, and JavaScript 

Remix IDE - online interactive development environment to develop smart contracts with solidity

Features of Solidity:
- Inheritance
    - What is inheritance in programming?
		Inheritance in programming is a mechanism where a class (sub-class) can inherit properties and behavior from another class (super-class). It promotes code reusability and establishes a hierarchical relationship between classes.

- Libraries
- Data Types
- Complex user-defined types
- Variables
- Functions
- Function Modifiers
- Events

Creating smart contracts in solidity requires:- Writing Source Code
- Compiling Source Code
- Deploy

Smart Contract Frameworks

- Hardhat
- Waffle
- Truffle

These allow you to work locally, commit to git, and do test driven development

Online IDE’s

- Remix 

================================================

SOLIDITY OVERVIEW

https://docs.base.org/base-camp/docs/introduction-to-solidity/solidity-overview 

Solidity is very similar to other programming languages; most developers won't struggle to write familiar operations. However, there are some critically important properties to keep in mind. Operations are much more expensive than in other environments, particularly storage. You can use most of the practices you are accustomed to, but you are limited to very small contract sizes and by the size of the stack. Finally, remember that you should always use a separate wallet for development. If you make a mistake, you could lose anything in it!

Origins TL;DR
Solidity was developed by the Ethereum Project's Solidity team and was first previewed in 2014 at DevCon0. The original goal was to create an easy-to-use language for smart contract development.

Reference Solidity Documentation if needed:
https://docs.soliditylang.org/en/v0.8.17/ 

================================================

Introduction to Remix

Features of Using Remix as an IDE:
	•	Offers a user-friendly interface and built-in Solidity compiler and debugger for efficient coding 1
	•	Provides an out-of-the-box-ready solution for decentralized app development 3
	•	Supports various plugins, making it versatile for different development needs 1
Pros and Cons of Using Remix as an IDE:
	•	Pros: Streamlines smart contract development, used by experts and beginners, no setup required, quick start for coding 4
	•	Cons: Limited to smart contract development only, does not support html, css, js, and may have issues with deploying functions 

https://docs.base.org/base-camp/docs/introduction-to-solidity/introduction-to-remix 



================================================

Deployment in Remix

When you deploy a contract in Ethereum, an address is generated - this address is like the IP address for a server

All ethereum address have 20 character length / hexadecimal 0-9 and A-Z Ex: 0xd9145CCE52D386f254917e481eB44e9943F39138

For the Greeting.sol file, remember:

`external pure returns (string memory)` serves as a crucial component of the function declaration. Here’s what each part means:

1. **`external`**: This keyword specifies the visibility of the function. An `external` function can only be called from outside the contract itself (not internally by other functions within the same contract unless through `this`). It's often used when a function needs to be called by other contracts or transactions, but not by other functions inside the same contract.

2. **`pure`**: This keyword indicates that the function does not read from or modify the state of the blockchain. A `pure` function can only operate on its own parameters and can return values. It ensures that running the function won't affect the contract's data or any blockchain state. This is useful for functions that do calculations or return constant values.

3. **`returns (string memory)`**: This part specifies the return type of the function. `string` is a data type in Solidity for text data. The `memory` keyword indicates that the string is stored in memory, which is a temporary place to store data during function execution. This is opposed to storing data in the blockchain, which would use `storage` and persist between transactions.

The positioning of `external pure returns (string memory)` between the function name with its parameters (`sayHello()`) and the function’s body enclosed in curly braces `{}` follows the syntax of Solidity for function declarations. The syntax helps define how the function behaves (its visibility and effects on the state), and what it outputs before detailing what it actually does in the body.

This structure ensures that anyone reading the contract can immediately understand the function's interface and constraints before getting into the details of its implementation.